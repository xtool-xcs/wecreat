var JB=Object.defineProperty;var dB=(U,F,Q)=>F in U?JB(U,F,{enumerable:!0,configurable:!0,writable:!0,value:Q}):U[F]=Q;var a=(U,F,Q)=>(dB(U,typeof F!="symbol"?F+"":F,Q),Q);import{K as vU,O as SB}from"./index-e43f4e63.js";import{i as X,M as ZB,t as WB,d as NB}from"./index-affcdb37.js";import{b as nB}from"./opencv-49a7e8f2.js";import{S as JU,c as LU,a as m,b as K,r as b,i as v,f as EB}from"./isObject-93378927.js";function kB(U,F){return"".concat(U,":").concat(F.port||"8080").concat(F.url)}function TB(U,F,Q){var l;const B=((l=U.method)==null?void 0:l.toUpperCase())==="POST",R=Object.assign({},U.params,Q==null?void 0:Q.params),V=B?(Q==null?void 0:Q.data)||U.data:void 0;return{...U,url:kB(F,U),params:R,data:V}}function UF(U){const F=new Uint8Array(U.length);for(let Q=0;Q<F.length;Q++)F[Q]=U.charCodeAt(Q);return F.buffer}let RU;function aB(U){RU=nB.create({timeout:1e3*15}),window.instance=RU,RU.interceptors.response.use(F=>(U!=null&&U.succeedCb&&(U==null||U.succeedCb(F)),F),F=>(U!=null&&U.errorCb&&(U==null||U.errorCb(F)),Promise.reject(F)))}const FF={takePhoto:{url:"/camera/take_photo",method:"GET",responseType:"blob",timeout:60*2e3},measureDistance:{url:"/camera/measure_distance",method:"GET",timeout:60*1e3,params:{}},cameraDownload:{url:"/device/camera/download",method:"GET",timeout:60*1e3,params:{}},uploadGcode:{method:"post",url:"/process/upload",timeout:120*1e3,headers:{"Content-Type":"application/octet-stream"}},uploadMcu:{method:"post",url:"/test/cmd/mcu",timeout:120*1e3,headers:{"Content-Type":"application/octet-stream"}},setFactorySn:{method:"post",url:"/device/set_factory_sn"},setWlan0Mac:{method:"post",url:"/device/set_wlan0_mac"},startProcess:{method:"post",url:"/process/start",headers:{"Content-Type":"application/x-www-form-urlencoded"},data:new URLSearchParams},otaStart:{method:"post",url:"/ota/start",headers:{"Content-Type":"application/x-www-form-urlencoded"},data:new URLSearchParams},controlProcess:{method:"post",url:"/process/control",headers:{"Content-Type":"application/x-www-form-urlencoded"}},setDeviceConfig:{method:"post",url:"/device/set_config"},otaUpload:{method:"post",url:"/ota/upload",timeout:120*1e3,headers:{"Content-Type":"application/octet-stream"}},cameraUpload:{method:"post",url:"/device/camera/upload",timeout:120*1e3,headers:{"Content-Type":"application/octet-stream"}},setInverseDis:{method:"get",url:"/device/set_inverse_dis"}};function DB(U){const F={};return Object.keys(FF).forEach(Q=>{F[Q]=B=>{const R=TB(FF[Q],U,B);return RU(R)}}),F}class tB{constructor(F){a(this,"apis");a(this,"id","妙笔一号机");a(this,"stageWidth",420);a(this,"stageHeight",290);aB(F)}connect(F){this.apis=DB(F)}setDeviceConfig(F){return this.apis.setDeviceConfig(F)}startProcess(F){return this.apis.startProcess(F)}otaStart(F){return this.apis.otaStart({params:{upgrade_type:F}})}takePhoto(){return this.apis.takePhoto()}uploadGcode(F,Q){const B=UF(F);return console.log(F),this.apis.uploadGcode({data:B,params:{md5:Q}})}uploadMcu(F,Q){const B=UF(F);return this.apis.uploadMcu({data:B,params:{md5:Q}})}setFactorySn(F){return this.apis.setFactorySn({data:F})}setWlan0Mac(F){return this.apis.setWlan0Mac({data:F})}otaUpload(F,Q,B){return this.apis.otaUpload({data:F,params:{md5:Q,upgrade_type:B}})}cameraUpload(F,Q){return this.apis.cameraUpload({data:F,params:{md5:Q}})}controlProcess(F){return this.apis.controlProcess({params:{action:F}})}measureDistance(F){return this.apis.measureDistance({params:F})}cameraDownload(){return this.apis.cameraDownload()}setInverseDis(F){return this.apis.setInverseDis({params:F})}}function DU(){return new tB}class CB{constructor(){a(this,"heartTimeOut");a(this,"ServerHeartTimeOut");a(this,"timeout",2e4)}reset(){clearTimeout(this.heartTimeOut),clearTimeout(this.ServerHeartTimeOut)}start(F){this.heartTimeOut=setTimeout(Q=>{F(Q),this.ServerHeartTimeOut=setTimeout(B=>{F(B),this.reset(),this.start(F)},this.timeout)},this.timeout)}}class cB extends CB{constructor(Q){super();a(this,"ws");a(this,"reconnectTimer",0);a(this,"reconnectCount",10);a(this,"options",{url:null,heartTime:5e3,heartMsg:"ping",isReconnect:!0,isRestory:!1,reconnectTime:5e3,reconnectCount:5,openCb:Q=>{console.log("连接成功的默认回调::::",Q)},closeCb:Q=>{console.log("关闭的默认回调::::",Q)},messageCb:Q=>{console.log("连接成功的默认回调::::",Q)},errorCb:Q=>{console.log("错误的默认回调::::",Q)}});Object.assign(this.options,Q),this.create()}create(){if(!("WebSocket"in window))throw new Error("当前浏览器不支持，无法使用");if(!this.options.url)throw new Error("地址不存在，无法建立通道");this.ws=new WebSocket(this.options.url),this.onopen(this.options.openCb),this.onclose(this.options.closeCb),this.onmessage(this.options.messageCb)}onopen(Q){this.ws.onopen=B=>{clearTimeout(this.reconnectTimer),this.options.reconnectCount=this.reconnectCount,super.reset(),super.start(()=>{this.ws.readyState===this.ws.OPEN?this.send(this.options.heartMsg):!this.options.isRestory&&this.onreconnect()}),typeof Q=="function"?Q(B):typeof this.options.openCb=="function"&&this.options.openCb(B)}}onclose(Q){this.ws.onclose=B=>{super.reset(),!this.options.isRestory&&this.onreconnect(),typeof Q=="function"?Q(B):typeof this.options.closeCb=="function"&&this.options.closeCb(B)}}onerror(Q){this.ws.onerror=B=>{typeof Q=="function"?Q(B):typeof this.options.errorCb=="function"&&this.options.errorCb(B)}}onmessage(Q){this.ws.onmessage=B=>{const R=B.data,V=JSON.parse(R);V?(super.reset(),super.start(()=>{this.ws.readyState===this.ws.OPEN?this.send(this.options.heartMsg):!this.options.isRestory&&this.onreconnect()}),console.log(V,"onmessage"),typeof Q=="function"?Q(V):typeof this.options.messageCb=="function"&&this.options.messageCb(V)):console.log("收到失败的数据！")}}send(Q){if(this.ws.readyState!==this.ws.OPEN)throw new Error("没有连接到服务器，无法推送");Q=JSON.stringify(Q),this.ws.send(Q)}onreconnect(){this.options.reconnectCount>0||this.options.reconnectCount===-1?this.reconnectTimer=setTimeout(()=>{this.create(),this.options.reconnectCount!==-1&&this.options.reconnectCount--},this.options.reconnectTime):(clearTimeout(this.reconnectTimer),this.options.reconnectCount=this.reconnectCount)}destroy(){super.reset(),clearTimeout(this.reconnectTimer),this.options.isRestory=!0,this.ws.close()}}const pB=vU("socket",{state:()=>({socket:void 0,socketData:{control:{action:1}}}),getters:{},actions:{initScoket(){var Q;const F=(Q=VB().deviceParams)==null?void 0:Q.wlan0_ip;this.socket=new cB({url:"ws://".concat(F,":8082/websocket"),messageCb:B=>{switch(B.type){case"control":this.socketData.control.action=B.info.action;break}}})}}}),hB=U=>new Promise(async(F,Q)=>{const B=URL.createObjectURL(U),R=new Image;R.src=B,R.onload=()=>{URL.revokeObjectURL(B),F(R)},R.onerror=Q});function eB(U,F){for(var Q=-1,B=U==null?0:U.length,R=Array(B);++Q<B;)R[Q]=F(U[Q],Q,U);return R}var MB=1/0,QF=JU?JU.prototype:void 0,BF=QF?QF.toString:void 0;function fF(U){if(typeof U=="string")return U;if(X(U))return eB(U,fF)+"";if(LU(U))return BF?BF.call(U):"";var F=U+"";return F=="0"&&1/U==-MB?"-0":F}function AF(U){return U}var mB="[object AsyncFunction]",bB="[object Function]",GB="[object GeneratorFunction]",XB="[object Proxy]";function iU(U){if(!m(U))return!1;var F=K(U);return F==bB||F==GB||F==mB||F==XB}var yB=b["__core-js_shared__"];const tU=yB;var RF=function(){var U=/[^.]+$/.exec(tU&&tU.keys&&tU.keys.IE_PROTO||"");return U?"Symbol(src)_1."+U:""}();function YB(U){return!!RF&&RF in U}var oB=Function.prototype,rB=oB.toString;function L(U){if(U!=null){try{return rB.call(U)}catch(F){}try{return U+""}catch(F){}}return""}var vB=/[\\^$.*+?()[\]{}|]/g,LB=/^\[object .+?Constructor\]$/,iB=Function.prototype,zB=Object.prototype,xB=iB.toString,HB=zB.hasOwnProperty,sB=RegExp("^"+xB.call(HB).replace(vB,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");function IB(U){if(!m(U)||YB(U))return!1;var F=iU(U)?sB:LB;return F.test(L(U))}function wB(U,F){return U==null?void 0:U[F]}function i(U,F){var Q=wB(U,F);return IB(Q)?Q:void 0}var OB=i(b,"WeakMap");const eU=OB;var VF=Object.create,KB=function(){function U(){}return function(F){if(!m(F))return{};if(VF)return VF(F);U.prototype=F;var Q=new U;return U.prototype=void 0,Q}}();const jB=KB;function uB(U,F,Q){switch(Q.length){case 0:return U.call(F);case 1:return U.call(F,Q[0]);case 2:return U.call(F,Q[0],Q[1]);case 3:return U.call(F,Q[0],Q[1],Q[2])}return U.apply(F,Q)}function qF(U,F){var Q=-1,B=U.length;for(F||(F=Array(B));++Q<B;)F[Q]=U[Q];return F}var gB=800,PB=16,fB=Date.now;function AB(U){var F=0,Q=0;return function(){var B=fB(),R=PB-(B-Q);if(Q=B,R>0){if(++F>=gB)return arguments[0]}else F=0;return U.apply(void 0,arguments)}}function qB(U){return function(){return U}}var _B=function(){try{var U=i(Object,"defineProperty");return U({},"",{}),U}catch(F){}}();const dU=_B;var $B=dU?function(U,F){return dU(U,"toString",{configurable:!0,enumerable:!1,value:qB(F),writable:!0})}:AF;const UR=$B;var FR=AB(UR);const QR=FR;function BR(U,F){for(var Q=-1,B=U==null?0:U.length;++Q<B&&F(U[Q],Q,U)!==!1;);return U}var RR=9007199254740991,VR=/^(?:0|[1-9]\d*)$/;function zU(U,F){var Q=typeof U;return F=F==null?RR:F,!!F&&(Q=="number"||Q!="symbol"&&VR.test(U))&&U>-1&&U%1==0&&U<F}function xU(U,F,Q){F=="__proto__"&&dU?dU(U,F,{configurable:!0,enumerable:!0,value:Q,writable:!0}):U[F]=Q}function WU(U,F){return U===F||U!==U&&F!==F}var lR=Object.prototype,JR=lR.hasOwnProperty;function HU(U,F,Q){var B=U[F];(!(JR.call(U,F)&&WU(B,Q))||Q===void 0&&!(F in U))&&xU(U,F,Q)}function FU(U,F,Q,B){var R=!Q;Q||(Q={});for(var V=-1,l=F.length;++V<l;){var J=F[V],d=B?B(Q[J],U[J],J,Q,U):void 0;d===void 0&&(d=U[J]),R?xU(Q,J,d):HU(Q,J,d)}return Q}var lF=Math.max;function dR(U,F,Q){return F=lF(F===void 0?U.length-1:F,0),function(){for(var B=arguments,R=-1,V=lF(B.length-F,0),l=Array(V);++R<V;)l[R]=B[F+R];R=-1;for(var J=Array(F+1);++R<F;)J[R]=B[R];return J[F]=Q(l),uB(U,this,J)}}function SR(U,F){return QR(dR(U,F,AF),U+"")}var ZR=9007199254740991;function _F(U){return typeof U=="number"&&U>-1&&U%1==0&&U<=ZR}function NU(U){return U!=null&&_F(U.length)&&!iU(U)}function WR(U,F,Q){if(!m(Q))return!1;var B=typeof F;return(B=="number"?NU(Q)&&zU(F,Q.length):B=="string"&&F in Q)?WU(Q[F],U):!1}function NR(U){return SR(function(F,Q){var B=-1,R=Q.length,V=R>1?Q[R-1]:void 0,l=R>2?Q[2]:void 0;for(V=U.length>3&&typeof V=="function"?(R--,V):void 0,l&&WR(Q[0],Q[1],l)&&(V=R<3?void 0:V,R=1),F=Object(F);++B<R;){var J=Q[B];J&&U(F,J,B,V)}return F})}var nR=Object.prototype;function sU(U){var F=U&&U.constructor,Q=typeof F=="function"&&F.prototype||nR;return U===Q}function ER(U,F){for(var Q=-1,B=Array(U);++Q<U;)B[Q]=F(Q);return B}var kR="[object Arguments]";function JF(U){return v(U)&&K(U)==kR}var $F=Object.prototype,TR=$F.hasOwnProperty,aR=$F.propertyIsEnumerable,DR=JF(function(){return arguments}())?JF:function(U){return v(U)&&TR.call(U,"callee")&&!aR.call(U,"callee")};const MU=DR;function tR(){return!1}var UQ=typeof exports=="object"&&exports&&!exports.nodeType&&exports,dF=UQ&&typeof module=="object"&&module&&!module.nodeType&&module,CR=dF&&dF.exports===UQ,SF=CR?b.Buffer:void 0,cR=SF?SF.isBuffer:void 0,pR=cR||tR;const IU=pR;var hR="[object Arguments]",eR="[object Array]",MR="[object Boolean]",mR="[object Date]",bR="[object Error]",GR="[object Function]",XR="[object Map]",yR="[object Number]",YR="[object Object]",oR="[object RegExp]",rR="[object Set]",vR="[object String]",LR="[object WeakMap]",iR="[object ArrayBuffer]",zR="[object DataView]",xR="[object Float32Array]",HR="[object Float64Array]",sR="[object Int8Array]",IR="[object Int16Array]",wR="[object Int32Array]",OR="[object Uint8Array]",KR="[object Uint8ClampedArray]",jR="[object Uint16Array]",uR="[object Uint32Array]",E={};E[xR]=E[HR]=E[sR]=E[IR]=E[wR]=E[OR]=E[KR]=E[jR]=E[uR]=!0;E[hR]=E[eR]=E[iR]=E[MR]=E[zR]=E[mR]=E[bR]=E[GR]=E[XR]=E[yR]=E[YR]=E[oR]=E[rR]=E[vR]=E[LR]=!1;function gR(U){return v(U)&&_F(U.length)&&!!E[K(U)]}function wU(U){return function(F){return U(F)}}var FQ=typeof exports=="object"&&exports&&!exports.nodeType&&exports,q=FQ&&typeof module=="object"&&module&&!module.nodeType&&module,PR=q&&q.exports===FQ,CU=PR&&EB.process,fR=function(){try{var U=q&&q.require&&q.require("util").types;return U||CU&&CU.binding&&CU.binding("util")}catch(F){}}();const w=fR;var ZF=w&&w.isTypedArray,AR=ZF?wU(ZF):gR;const QQ=AR;var qR=Object.prototype,_R=qR.hasOwnProperty;function BQ(U,F){var Q=X(U),B=!Q&&MU(U),R=!Q&&!B&&IU(U),V=!Q&&!B&&!R&&QQ(U),l=Q||B||R||V,J=l?ER(U.length,String):[],d=J.length;for(var S in U)(F||_R.call(U,S))&&!(l&&(S=="length"||R&&(S=="offset"||S=="parent")||V&&(S=="buffer"||S=="byteLength"||S=="byteOffset")||zU(S,d)))&&J.push(S);return J}function RQ(U,F){return function(Q){return U(F(Q))}}var $R=RQ(Object.keys,Object);const UV=$R;var FV=Object.prototype,QV=FV.hasOwnProperty;function BV(U){if(!sU(U))return UV(U);var F=[];for(var Q in Object(U))QV.call(U,Q)&&Q!="constructor"&&F.push(Q);return F}function OU(U){return NU(U)?BQ(U):BV(U)}function RV(U){var F=[];if(U!=null)for(var Q in Object(U))F.push(Q);return F}var VV=Object.prototype,lV=VV.hasOwnProperty;function JV(U){if(!m(U))return RV(U);var F=sU(U),Q=[];for(var B in U)B=="constructor"&&(F||!lV.call(U,B))||Q.push(B);return Q}function QU(U){return NU(U)?BQ(U,!0):JV(U)}var dV=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,SV=/^\w*$/;function ZV(U,F){if(X(U))return!1;var Q=typeof U;return Q=="number"||Q=="symbol"||Q=="boolean"||U==null||LU(U)?!0:SV.test(U)||!dV.test(U)||F!=null&&U in Object(F)}var WV=i(Object,"create");const $=WV;function NV(){this.__data__=$?$(null):{},this.size=0}function nV(U){var F=this.has(U)&&delete this.__data__[U];return this.size-=F?1:0,F}var EV="__lodash_hash_undefined__",kV=Object.prototype,TV=kV.hasOwnProperty;function aV(U){var F=this.__data__;if($){var Q=F[U];return Q===EV?void 0:Q}return TV.call(F,U)?F[U]:void 0}var DV=Object.prototype,tV=DV.hasOwnProperty;function CV(U){var F=this.__data__;return $?F[U]!==void 0:tV.call(F,U)}var cV="__lodash_hash_undefined__";function pV(U,F){var Q=this.__data__;return this.size+=this.has(U)?0:1,Q[U]=$&&F===void 0?cV:F,this}function r(U){var F=-1,Q=U==null?0:U.length;for(this.clear();++F<Q;){var B=U[F];this.set(B[0],B[1])}}r.prototype.clear=NV;r.prototype.delete=nV;r.prototype.get=aV;r.prototype.has=CV;r.prototype.set=pV;function hV(){this.__data__=[],this.size=0}function nU(U,F){for(var Q=U.length;Q--;)if(WU(U[Q][0],F))return Q;return-1}var eV=Array.prototype,MV=eV.splice;function mV(U){var F=this.__data__,Q=nU(F,U);if(Q<0)return!1;var B=F.length-1;return Q==B?F.pop():MV.call(F,Q,1),--this.size,!0}function bV(U){var F=this.__data__,Q=nU(F,U);return Q<0?void 0:F[Q][1]}function GV(U){return nU(this.__data__,U)>-1}function XV(U,F){var Q=this.__data__,B=nU(Q,U);return B<0?(++this.size,Q.push([U,F])):Q[B][1]=F,this}function G(U){var F=-1,Q=U==null?0:U.length;for(this.clear();++F<Q;){var B=U[F];this.set(B[0],B[1])}}G.prototype.clear=hV;G.prototype.delete=mV;G.prototype.get=bV;G.prototype.has=GV;G.prototype.set=XV;var yV=i(b,"Map");const UU=yV;function YV(){this.size=0,this.__data__={hash:new r,map:new(UU||G),string:new r}}function oV(U){var F=typeof U;return F=="string"||F=="number"||F=="symbol"||F=="boolean"?U!=="__proto__":U===null}function EU(U,F){var Q=U.__data__;return oV(F)?Q[typeof F=="string"?"string":"hash"]:Q.map}function rV(U){var F=EU(this,U).delete(U);return this.size-=F?1:0,F}function vV(U){return EU(this,U).get(U)}function LV(U){return EU(this,U).has(U)}function iV(U,F){var Q=EU(this,U),B=Q.size;return Q.set(U,F),this.size+=Q.size==B?0:1,this}function y(U){var F=-1,Q=U==null?0:U.length;for(this.clear();++F<Q;){var B=U[F];this.set(B[0],B[1])}}y.prototype.clear=YV;y.prototype.delete=rV;y.prototype.get=vV;y.prototype.has=LV;y.prototype.set=iV;var zV="Expected a function";function KU(U,F){if(typeof U!="function"||F!=null&&typeof F!="function")throw new TypeError(zV);var Q=function(){var B=arguments,R=F?F.apply(this,B):B[0],V=Q.cache;if(V.has(R))return V.get(R);var l=U.apply(this,B);return Q.cache=V.set(R,l)||V,l};return Q.cache=new(KU.Cache||y),Q}KU.Cache=y;var xV=500;function HV(U){var F=KU(U,function(B){return Q.size===xV&&Q.clear(),B}),Q=F.cache;return F}var sV=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,IV=/\\(\\)?/g,wV=HV(function(U){var F=[];return U.charCodeAt(0)===46&&F.push(""),U.replace(sV,function(Q,B,R,V){F.push(R?V.replace(IV,"$1"):B||Q)}),F});const OV=wV;function KV(U){return U==null?"":fF(U)}function jV(U,F){return X(U)?U:ZV(U,F)?[U]:OV(KV(U))}var uV=1/0;function gV(U){if(typeof U=="string"||LU(U))return U;var F=U+"";return F=="0"&&1/U==-uV?"-0":F}function VQ(U,F){for(var Q=-1,B=F.length,R=U.length;++Q<B;)U[R+Q]=F[Q];return U}var PV=RQ(Object.getPrototypeOf,Object);const jU=PV;var fV="[object Object]",AV=Function.prototype,qV=Object.prototype,lQ=AV.toString,_V=qV.hasOwnProperty,$V=lQ.call(Object);function U0(U){if(!v(U)||K(U)!=fV)return!1;var F=jU(U);if(F===null)return!0;var Q=_V.call(F,"constructor")&&F.constructor;return typeof Q=="function"&&Q instanceof Q&&lQ.call(Q)==$V}function F0(){this.__data__=new G,this.size=0}function Q0(U){var F=this.__data__,Q=F.delete(U);return this.size=F.size,Q}function B0(U){return this.__data__.get(U)}function R0(U){return this.__data__.has(U)}var V0=200;function l0(U,F){var Q=this.__data__;if(Q instanceof G){var B=Q.__data__;if(!UU||B.length<V0-1)return B.push([U,F]),this.size=++Q.size,this;Q=this.__data__=new y(B)}return Q.set(U,F),this.size=Q.size,this}function z(U){var F=this.__data__=new G(U);this.size=F.size}z.prototype.clear=F0;z.prototype.delete=Q0;z.prototype.get=B0;z.prototype.has=R0;z.prototype.set=l0;function J0(U,F){return U&&FU(F,OU(F),U)}function d0(U,F){return U&&FU(F,QU(F),U)}var JQ=typeof exports=="object"&&exports&&!exports.nodeType&&exports,WF=JQ&&typeof module=="object"&&module&&!module.nodeType&&module,S0=WF&&WF.exports===JQ,NF=S0?b.Buffer:void 0,nF=NF?NF.allocUnsafe:void 0;function dQ(U,F){if(F)return U.slice();var Q=U.length,B=nF?nF(Q):new U.constructor(Q);return U.copy(B),B}function Z0(U,F){for(var Q=-1,B=U==null?0:U.length,R=0,V=[];++Q<B;){var l=U[Q];F(l,Q,U)&&(V[R++]=l)}return V}function SQ(){return[]}var W0=Object.prototype,N0=W0.propertyIsEnumerable,EF=Object.getOwnPropertySymbols,n0=EF?function(U){return U==null?[]:(U=Object(U),Z0(EF(U),function(F){return N0.call(U,F)}))}:SQ;const uU=n0;function E0(U,F){return FU(U,uU(U),F)}var k0=Object.getOwnPropertySymbols,T0=k0?function(U){for(var F=[];U;)VQ(F,uU(U)),U=jU(U);return F}:SQ;const ZQ=T0;function a0(U,F){return FU(U,ZQ(U),F)}function WQ(U,F,Q){var B=F(U);return X(U)?B:VQ(B,Q(U))}function D0(U){return WQ(U,OU,uU)}function t0(U){return WQ(U,QU,ZQ)}var C0=i(b,"DataView");const mU=C0;var c0=i(b,"Promise");const bU=c0;var p0=i(b,"Set");const GU=p0;var kF="[object Map]",h0="[object Object]",TF="[object Promise]",aF="[object Set]",DF="[object WeakMap]",tF="[object DataView]",e0=L(mU),M0=L(UU),m0=L(bU),b0=L(GU),G0=L(eU),Y=K;(mU&&Y(new mU(new ArrayBuffer(1)))!=tF||UU&&Y(new UU)!=kF||bU&&Y(bU.resolve())!=TF||GU&&Y(new GU)!=aF||eU&&Y(new eU)!=DF)&&(Y=function(U){var F=K(U),Q=F==h0?U.constructor:void 0,B=Q?L(Q):"";if(B)switch(B){case e0:return tF;case M0:return kF;case m0:return TF;case b0:return aF;case G0:return DF}return F});const gU=Y;var X0=Object.prototype,y0=X0.hasOwnProperty;function Y0(U){var F=U.length,Q=new U.constructor(F);return F&&typeof U[0]=="string"&&y0.call(U,"index")&&(Q.index=U.index,Q.input=U.input),Q}var o0=b.Uint8Array;const CF=o0;function PU(U){var F=new U.constructor(U.byteLength);return new CF(F).set(new CF(U)),F}function r0(U,F){var Q=F?PU(U.buffer):U.buffer;return new U.constructor(Q,U.byteOffset,U.byteLength)}var v0=/\w*$/;function L0(U){var F=new U.constructor(U.source,v0.exec(U));return F.lastIndex=U.lastIndex,F}var cF=JU?JU.prototype:void 0,pF=cF?cF.valueOf:void 0;function i0(U){return pF?Object(pF.call(U)):{}}function NQ(U,F){var Q=F?PU(U.buffer):U.buffer;return new U.constructor(Q,U.byteOffset,U.length)}var z0="[object Boolean]",x0="[object Date]",H0="[object Map]",s0="[object Number]",I0="[object RegExp]",w0="[object Set]",O0="[object String]",K0="[object Symbol]",j0="[object ArrayBuffer]",u0="[object DataView]",g0="[object Float32Array]",P0="[object Float64Array]",f0="[object Int8Array]",A0="[object Int16Array]",q0="[object Int32Array]",_0="[object Uint8Array]",$0="[object Uint8ClampedArray]",Ul="[object Uint16Array]",Fl="[object Uint32Array]";function Ql(U,F,Q){var B=U.constructor;switch(F){case j0:return PU(U);case z0:case x0:return new B(+U);case u0:return r0(U,Q);case g0:case P0:case f0:case A0:case q0:case _0:case $0:case Ul:case Fl:return NQ(U,Q);case H0:return new B;case s0:case O0:return new B(U);case I0:return L0(U);case w0:return new B;case K0:return i0(U)}}function nQ(U){return typeof U.constructor=="function"&&!sU(U)?jB(jU(U)):{}}var Bl="[object Map]";function Rl(U){return v(U)&&gU(U)==Bl}var hF=w&&w.isMap,Vl=hF?wU(hF):Rl;const ll=Vl;var Jl="[object Set]";function dl(U){return v(U)&&gU(U)==Jl}var eF=w&&w.isSet,Sl=eF?wU(eF):dl;const Zl=Sl;var Wl=1,Nl=2,nl=4,EQ="[object Arguments]",El="[object Array]",kl="[object Boolean]",Tl="[object Date]",al="[object Error]",kQ="[object Function]",Dl="[object GeneratorFunction]",tl="[object Map]",Cl="[object Number]",TQ="[object Object]",cl="[object RegExp]",pl="[object Set]",hl="[object String]",el="[object Symbol]",Ml="[object WeakMap]",ml="[object ArrayBuffer]",bl="[object DataView]",Gl="[object Float32Array]",Xl="[object Float64Array]",yl="[object Int8Array]",Yl="[object Int16Array]",ol="[object Int32Array]",rl="[object Uint8Array]",vl="[object Uint8ClampedArray]",Ll="[object Uint16Array]",il="[object Uint32Array]",n={};n[EQ]=n[El]=n[ml]=n[bl]=n[kl]=n[Tl]=n[Gl]=n[Xl]=n[yl]=n[Yl]=n[ol]=n[tl]=n[Cl]=n[TQ]=n[cl]=n[pl]=n[hl]=n[el]=n[rl]=n[vl]=n[Ll]=n[il]=!0;n[al]=n[kQ]=n[Ml]=!1;function VU(U,F,Q,B,R,V){var l,J=F&Wl,d=F&Nl,S=F&nl;if(Q&&(l=R?Q(U,B,R,V):Q(U)),l!==void 0)return l;if(!m(U))return U;var Z=X(U);if(Z){if(l=Y0(U),!J)return qF(U,l)}else{var W=gU(U),p=W==kQ||W==Dl;if(IU(U))return dQ(U,J);if(W==TQ||W==EQ||p&&!R){if(l=d||p?{}:nQ(U),!J)return d?a0(U,d0(l,U)):E0(U,J0(l,U))}else{if(!n[W])return R?U:{};l=Ql(U,W,J)}}V||(V=new z);var t=V.get(U);if(t)return t;V.set(U,l),Zl(U)?U.forEach(function(D){l.add(VU(D,F,Q,D,U,V))}):ll(U)&&U.forEach(function(D,c){l.set(c,VU(D,F,Q,c,U,V))});var C=S?d?t0:D0:d?QU:OU,T=Z?void 0:C(U);return BR(T||U,function(D,c){T&&(c=D,D=U[c]),HU(l,c,VU(D,F,Q,c,U,V))}),l}var zl=1,xl=4;function cU(U){return VU(U,zl|xl)}function Hl(U){return function(F,Q,B){for(var R=-1,V=Object(F),l=B(F),J=l.length;J--;){var d=l[U?J:++R];if(Q(V[d],d,V)===!1)break}return F}}var sl=Hl();const Il=sl;function XU(U,F,Q){(Q!==void 0&&!WU(U[F],Q)||Q===void 0&&!(F in U))&&xU(U,F,Q)}function wl(U){return v(U)&&NU(U)}function yU(U,F){if(!(F==="constructor"&&typeof U[F]=="function")&&F!="__proto__")return U[F]}function Ol(U){return FU(U,QU(U))}function Kl(U,F,Q,B,R,V,l){var J=yU(U,Q),d=yU(F,Q),S=l.get(d);if(S){XU(U,Q,S);return}var Z=V?V(J,d,Q+"",U,F,l):void 0,W=Z===void 0;if(W){var p=X(d),t=!p&&IU(d),C=!p&&!t&&QQ(d);Z=d,p||t||C?X(J)?Z=J:wl(J)?Z=qF(J):t?(W=!1,Z=dQ(d,!0)):C?(W=!1,Z=NQ(d,!0)):Z=[]:U0(d)||MU(d)?(Z=J,MU(J)?Z=Ol(J):(!m(J)||iU(J))&&(Z=nQ(d))):W=!1}W&&(l.set(d,Z),R(Z,d,B,V,l),l.delete(d)),XU(U,Q,Z)}function aQ(U,F,Q,B,R){U!==F&&Il(F,function(V,l){if(R||(R=new z),m(V))Kl(U,F,l,Q,aQ,B,R);else{var J=B?B(yU(U,l),V,l+"",U,F,R):void 0;J===void 0&&(J=V),XU(U,l,J)}},QU)}var jl=NR(function(U,F,Q){aQ(U,F,Q)});const ul=jl;function gl(U,F,Q,B){if(!m(U))return U;F=jV(F,U);for(var R=-1,V=F.length,l=V-1,J=U;J!=null&&++R<V;){var d=gV(F[R]),S=Q;if(d==="__proto__"||d==="constructor"||d==="prototype")return U;if(R!=l){var Z=J[d];S=B?B(Z,d,J):void 0,S===void 0&&(S=m(Z)?Z:zU(F[R+1])?[]:{})}HU(J,d,S),J=J[d]}return U}function MF(U,F,Q){return U==null?U:gl(U,F,Q)}var M=(U=>(U.engrave="engrave",U.fillEngrave="fillEngrave",U.cut="cut",U))(M||{});class Pl{constructor(){a(this,"elementMap");this.elementMap=new Map}set(F,Q){if(!this.elementMap.has(F))this.elementMap.set(F,{cut:{power:100,speed:20,repeat:1,strengthCutting:!1},engrave:{power:20,speed:50,repeat:1},fillEngrave:{power:22,speed:60,repeat:1},isLock:!0,processMode:Q.type==="image"?M.fillEngrave:M.engrave,oneWayScan:!0,lineDesity:100,...Q});else{const B=this.elementMap.get(F),R=ul({},B,Q);this.elementMap.set(F,R)}}get(F){return this.elementMap.get(F)}delete(F){this.elementMap.has(F)&&this.elementMap.delete(F)}destroy(){this.elementMap.clear()}}const H=new Pl;M.engrave+"",M.fillEngrave+"",M.cut+"";const mF={"10w":{material_0000001:{title:"material.denim_3mm",id:"material_0000001",thickness:3,engrave:{power:20,speed:50,repeat:1},fillEngrave:{power:35,speed:225,repeat:1},cut:{power:100,speed:20,repeat:1},isDef:!0},material_0000002:{title:"material.basewoord_3mm",id:"material_0000002",thickness:3,engrave:{power:20,speed:50,repeat:1},fillEngrave:{power:10,speed:100,repeat:1},cut:{power:100,speed:18,repeat:1},isDef:!0},material_0000003:{title:"material.acrylic_3mm",id:"material_0000003",thickness:3,engrave:{power:20,speed:50,repeat:1},fillEngrave:{power:10,speed:100,repeat:1},cut:{power:100,speed:18,repeat:1},isDef:!0},material_0000004:{title:"material.glass_3mm",id:"material_0000004",thickness:3,engrave:{power:20,speed:50,repeat:1},fillEngrave:{power:10,speed:100,repeat:1},cut:{power:100,speed:18,repeat:1},isDef:!0}},"20w":{material_0000001:{title:"material.denim_3mm",id:"material_0000001",thickness:3,engrave:{power:20,speed:50,repeat:1},fillEngrave:{power:40,speed:240,repeat:1},cut:{power:100,speed:20,repeat:1},isDef:!0},material_0000002:{title:"material.basewoord_3mm",id:"material_0000002",referenceImg:"20w_3_basswood.jpg",thickness:3,engrave:{power:50,speed:60,repeat:1},fillEngrave:{power:30,speed:60,repeat:1},cut:{power:100,speed:8,repeat:1},isDef:!0},material_0000003:{title:"material.acrylic_3mm",id:"material_0000003",thickness:3,engrave:{power:20,speed:50,repeat:1},fillEngrave:{power:10,speed:100,repeat:1},cut:{power:100,speed:18,repeat:1},isDef:!0},material_0000004:{title:"material.glass_3mm",id:"material_0000004",thickness:3,engrave:{power:20,speed:50,repeat:1},fillEngrave:{power:10,speed:100,repeat:1},cut:{power:100,speed:18,repeat:1},isDef:!0},material_0000005:{title:"material.metal",id:"material_0000005",thickness:3,engrave:{power:20,speed:50,repeat:1},fillEngrave:{power:70,speed:80,repeat:1},cut:{power:100,speed:18,repeat:1},isDef:!0},material_0000006:{title:"material.insulated_cup",id:"material_0000006",thickness:3,engrave:{power:20,speed:50,repeat:1},fillEngrave:{power:40,speed:80,repeat:1},cut:{power:100,speed:18,repeat:1},isDef:!0},material_0000007:{title:"material.rock_slab",id:"material_0000007",referenceImg:"20w_3_rock.jpg",thickness:3,engrave:{power:35,speed:60,repeat:1},fillEngrave:{power:35,speed:60,repeat:1},cut:{power:1,speed:1,repeat:1},isDef:!0}},"20w+2":{material_0000001:{title:"material.denim_3mm",id:"material_0000001",thickness:3,cut:{power:1,speed:1,repeat:1},engrave:{power:35,speed:60,repeat:1},fillEngrave:{power:35,speed:60,repeat:1},isDef:!0},material_0000002:{title:"material.basewoord_3mm",id:"material_0000002",thickness:3,cut:{power:100,speed:8,repeat:1},engrave:{power:50,speed:60,repeat:1},fillEngrave:{power:30,speed:60,repeat:1},isDef:!0},material_0000003:{title:"material.acrylic_3mm",id:"material_0000003",thickness:3,cut:{power:100,speed:18,repeat:1},engrave:{power:20,speed:50,repeat:1},fillEngrave:{power:10,speed:100,repeat:1},isDef:!0},material_0000004:{title:"material.glass_3mm",id:"material_0000004",thickness:3,cut:{power:100,speed:18,repeat:1},engrave:{power:20,speed:50,repeat:1},fillEngrave:{power:10,speed:100,repeat:1},isDef:!0},material_0000005:{title:"material.metal",id:"material_0000005",thickness:3,cut:{power:100,speed:18,repeat:1},engrave:{power:20,speed:50,repeat:1},fillEngrave:{power:70,speed:80,repeat:1},isDef:!0},material_0000006:{title:"material.insulated_cup",id:"material_0000006",thickness:3,cut:{power:100,speed:18,repeat:1},engrave:{power:20,speed:50,repeat:1},fillEngrave:{power:40,speed:80,repeat:1},isDef:!0}},"40w":{material_0000001:{title:"material.denim_3mm",id:"material_0000001",thickness:3,engrave:{power:20,speed:50,repeat:1},fillEngrave:{power:40,speed:240,repeat:1},cut:{power:100,speed:20,repeat:1},isDef:!0},material_0000002:{title:"material.basewoord_3mm",id:"material_0000002",thickness:3,engrave:{power:50,speed:60,repeat:1},fillEngrave:{power:30,speed:60,repeat:1},cut:{power:100,speed:8,repeat:1},isDef:!0},material_0000003:{title:"material.acrylic_3mm",id:"material_0000003",thickness:3,engrave:{power:20,speed:50,repeat:1},fillEngrave:{power:10,speed:100,repeat:1},cut:{power:100,speed:18,repeat:1},isDef:!0},material_0000004:{title:"material.glass_3mm",id:"material_0000004",thickness:3,cut:{power:100,speed:18,repeat:1},engrave:{power:20,speed:50,repeat:1},fillEngrave:{power:10,speed:100,repeat:1},isDef:!0},material_0000005:{title:"material.metal",id:"material_0000005",thickness:3,engrave:{power:20,speed:50,repeat:1},fillEngrave:{power:70,speed:80,repeat:1},cut:{power:100,speed:18,repeat:1},isDef:!0},material_0000006:{title:"material.insulated_cup",id:"material_0000006",thickness:3,engrave:{power:20,speed:50,repeat:1},fillEngrave:{power:40,speed:80,repeat:1},cut:{power:100,speed:18,repeat:1},isDef:!0}}};var fl=typeof global=="object"&&global&&global.Object===Object&&global;const DQ=fl;var Al=typeof self=="object"&&self&&self.Object===Object&&self,ql=DQ||Al||Function("return this")();const fU=ql;var _l=fU.Symbol;const O=_l;var tQ=Object.prototype,$l=tQ.hasOwnProperty,UJ=tQ.toString,A=O?O.toStringTag:void 0;function FJ(U){var F=$l.call(U,A),Q=U[A];try{U[A]=void 0;var B=!0}catch(V){}var R=UJ.call(U);return B&&(F?U[A]=Q:delete U[A]),R}var QJ=Object.prototype,BJ=QJ.toString;function RJ(U){return BJ.call(U)}var VJ="[object Null]",lJ="[object Undefined]",bF=O?O.toStringTag:void 0;function j(U){return U==null?U===void 0?lJ:VJ:bF&&bF in Object(U)?FJ(U):RJ(U)}function u(U){return U!=null&&typeof U=="object"}var JJ="[object Symbol]";function dJ(U){return typeof U=="symbol"||u(U)&&j(U)==JJ}function CQ(U,F){for(var Q=-1,B=U==null?0:U.length,R=Array(B);++Q<B;)R[Q]=F(U[Q],Q,U);return R}var SJ=Array.isArray;const cQ=SJ;var ZJ=1/0,GF=O?O.prototype:void 0,XF=GF?GF.toString:void 0;function pQ(U){if(typeof U=="string")return U;if(cQ(U))return CQ(U,pQ)+"";if(dJ(U))return XF?XF.call(U):"";var F=U+"";return F=="0"&&1/U==-ZJ?"-0":F}function kU(U){var F=typeof U;return U!=null&&(F=="object"||F=="function")}function hQ(U){return U}var WJ="[object AsyncFunction]",NJ="[object Function]",nJ="[object GeneratorFunction]",EJ="[object Proxy]";function eQ(U){if(!kU(U))return!1;var F=j(U);return F==NJ||F==nJ||F==WJ||F==EJ}var kJ=fU["__core-js_shared__"];const pU=kJ;var yF=function(){var U=/[^.]+$/.exec(pU&&pU.keys&&pU.keys.IE_PROTO||"");return U?"Symbol(src)_1."+U:""}();function TJ(U){return!!yF&&yF in U}var aJ=Function.prototype,DJ=aJ.toString;function tJ(U){if(U!=null){try{return DJ.call(U)}catch(F){}try{return U+""}catch(F){}}return""}var CJ=/[\\^$.*+?()[\]{}|]/g,cJ=/^\[object .+?Constructor\]$/,pJ=Function.prototype,hJ=Object.prototype,eJ=pJ.toString,MJ=hJ.hasOwnProperty,mJ=RegExp("^"+eJ.call(MJ).replace(CJ,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");function bJ(U){if(!kU(U)||TJ(U))return!1;var F=eQ(U)?mJ:cJ;return F.test(tJ(U))}function GJ(U,F){return U==null?void 0:U[F]}function XJ(U,F){var Q=GJ(U,F);return bJ(Q)?Q:void 0}function MQ(U,F,Q){switch(Q.length){case 0:return U.call(F);case 1:return U.call(F,Q[0]);case 2:return U.call(F,Q[0],Q[1]);case 3:return U.call(F,Q[0],Q[1],Q[2])}return U.apply(F,Q)}var yJ=800,YJ=16,oJ=Date.now;function rJ(U){var F=0,Q=0;return function(){var B=oJ(),R=YJ-(B-Q);if(Q=B,R>0){if(++F>=yJ)return arguments[0]}else F=0;return U.apply(void 0,arguments)}}function vJ(U){return function(){return U}}var LJ=function(){try{var U=XJ(Object,"defineProperty");return U({},"",{}),U}catch(F){}}();const SU=LJ;var iJ=SU?function(U,F){return SU(U,"toString",{configurable:!0,enumerable:!1,value:vJ(F),writable:!0})}:hQ;const zJ=iJ;var xJ=rJ(zJ);const HJ=xJ;var sJ=9007199254740991,IJ=/^(?:0|[1-9]\d*)$/;function mQ(U,F){var Q=typeof U;return F=F!=null?F:sJ,!!F&&(Q=="number"||Q!="symbol"&&IJ.test(U))&&U>-1&&U%1==0&&U<F}function bQ(U,F,Q){F=="__proto__"&&SU?SU(U,F,{configurable:!0,enumerable:!0,value:Q,writable:!0}):U[F]=Q}function AU(U,F){return U===F||U!==U&&F!==F}var wJ=Object.prototype,OJ=wJ.hasOwnProperty;function KJ(U,F,Q){var B=U[F];(!(OJ.call(U,F)&&AU(B,Q))||Q===void 0&&!(F in U))&&bQ(U,F,Q)}function jJ(U,F,Q,B){var R=!Q;Q||(Q={});for(var V=-1,l=F.length;++V<l;){var J=F[V],d=B?B(Q[J],U[J],J,Q,U):void 0;d===void 0&&(d=U[J]),R?bQ(Q,J,d):KJ(Q,J,d)}return Q}var YF=Math.max;function uJ(U,F,Q){return F=YF(F===void 0?U.length-1:F,0),function(){for(var B=arguments,R=-1,V=YF(B.length-F,0),l=Array(V);++R<V;)l[R]=B[F+R];R=-1;for(var J=Array(F+1);++R<F;)J[R]=B[R];return J[F]=Q(l),MQ(U,this,J)}}function GQ(U,F){return HJ(uJ(U,F,hQ),U+"")}var gJ=9007199254740991;function XQ(U){return typeof U=="number"&&U>-1&&U%1==0&&U<=gJ}function qU(U){return U!=null&&XQ(U.length)&&!eQ(U)}function yQ(U,F,Q){if(!kU(Q))return!1;var B=typeof F;return(B=="number"?qU(Q)&&mQ(F,Q.length):B=="string"&&F in Q)?AU(Q[F],U):!1}function PJ(U){return GQ(function(F,Q){var B=-1,R=Q.length,V=R>1?Q[R-1]:void 0,l=R>2?Q[2]:void 0;for(V=U.length>3&&typeof V=="function"?(R--,V):void 0,l&&yQ(Q[0],Q[1],l)&&(V=R<3?void 0:V,R=1),F=Object(F);++B<R;){var J=Q[B];J&&U(F,J,B,V)}return F})}var fJ=Object.prototype;function YQ(U){var F=U&&U.constructor,Q=typeof F=="function"&&F.prototype||fJ;return U===Q}function AJ(U,F){for(var Q=-1,B=Array(U);++Q<U;)B[Q]=F(Q);return B}var qJ="[object Arguments]";function oF(U){return u(U)&&j(U)==qJ}var oQ=Object.prototype,_J=oQ.hasOwnProperty,$J=oQ.propertyIsEnumerable,Ud=oF(function(){return arguments}())?oF:function(U){return u(U)&&_J.call(U,"callee")&&!$J.call(U,"callee")};const Fd=Ud;function Qd(){return!1}var rQ=typeof exports=="object"&&exports&&!exports.nodeType&&exports,rF=rQ&&typeof module=="object"&&module&&!module.nodeType&&module,Bd=rF&&rF.exports===rQ,vF=Bd?fU.Buffer:void 0,Rd=vF?vF.isBuffer:void 0,Vd=Rd||Qd;const ld=Vd;var Jd="[object Arguments]",dd="[object Array]",Sd="[object Boolean]",Zd="[object Date]",Wd="[object Error]",Nd="[object Function]",nd="[object Map]",Ed="[object Number]",kd="[object Object]",Td="[object RegExp]",ad="[object Set]",Dd="[object String]",td="[object WeakMap]",Cd="[object ArrayBuffer]",cd="[object DataView]",pd="[object Float32Array]",hd="[object Float64Array]",ed="[object Int8Array]",Md="[object Int16Array]",md="[object Int32Array]",bd="[object Uint8Array]",Gd="[object Uint8ClampedArray]",Xd="[object Uint16Array]",yd="[object Uint32Array]",k={};k[pd]=k[hd]=k[ed]=k[Md]=k[md]=k[bd]=k[Gd]=k[Xd]=k[yd]=!0;k[Jd]=k[dd]=k[Cd]=k[Sd]=k[cd]=k[Zd]=k[Wd]=k[Nd]=k[nd]=k[Ed]=k[kd]=k[Td]=k[ad]=k[Dd]=k[td]=!1;function Yd(U){return u(U)&&XQ(U.length)&&!!k[j(U)]}function od(U){return function(F){return U(F)}}var vQ=typeof exports=="object"&&exports&&!exports.nodeType&&exports,_=vQ&&typeof module=="object"&&module&&!module.nodeType&&module,rd=_&&_.exports===vQ,hU=rd&&DQ.process,vd=function(){try{var U=_&&_.require&&_.require("util").types;return U||hU&&hU.binding&&hU.binding("util")}catch(F){}}();const LF=vd;var iF=LF&&LF.isTypedArray,Ld=iF?od(iF):Yd;const id=Ld;var zd=Object.prototype,xd=zd.hasOwnProperty;function LQ(U,F){var Q=cQ(U),B=!Q&&Fd(U),R=!Q&&!B&&ld(U),V=!Q&&!B&&!R&&id(U),l=Q||B||R||V,J=l?AJ(U.length,String):[],d=J.length;for(var S in U)(F||xd.call(U,S))&&!(l&&(S=="length"||R&&(S=="offset"||S=="parent")||V&&(S=="buffer"||S=="byteLength"||S=="byteOffset")||mQ(S,d)))&&J.push(S);return J}function iQ(U,F){return function(Q){return U(F(Q))}}var Hd=iQ(Object.keys,Object);const sd=Hd;var Id=Object.prototype,wd=Id.hasOwnProperty;function Od(U){if(!YQ(U))return sd(U);var F=[];for(var Q in Object(U))wd.call(U,Q)&&Q!="constructor"&&F.push(Q);return F}function Kd(U){return qU(U)?LQ(U):Od(U)}function jd(U){var F=[];if(U!=null)for(var Q in Object(U))F.push(Q);return F}var ud=Object.prototype,gd=ud.hasOwnProperty;function Pd(U){if(!kU(U))return jd(U);var F=YQ(U),Q=[];for(var B in U)B=="constructor"&&(F||!gd.call(U,B))||Q.push(B);return Q}function fd(U){return qU(U)?LQ(U,!0):Pd(U)}var Ad=PJ(function(U,F,Q,B){jJ(F,fd(F),U,B)});const zF=Ad;function zQ(U){return U==null?"":pQ(U)}var qd=iQ(Object.getPrototypeOf,Object);const _d=qd;var $d="[object Object]",US=Function.prototype,FS=Object.prototype,xQ=US.toString,QS=FS.hasOwnProperty,BS=xQ.call(Object);function RS(U){if(!u(U)||j(U)!=$d)return!1;var F=_d(U);if(F===null)return!0;var Q=QS.call(F,"constructor")&&F.constructor;return typeof Q=="function"&&Q instanceof Q&&xQ.call(Q)==BS}var VS="[object DOMException]",lS="[object Error]";function HQ(U){if(!u(U))return!1;var F=j(U);return F==lS||F==VS||typeof U.message=="string"&&typeof U.name=="string"&&!RS(U)}var JS=GQ(function(U,F){try{return MQ(U,void 0,F)}catch(Q){return HQ(Q)?Q:new Error(Q)}});const dS=JS;function SS(U){return function(F){return U==null?void 0:U[F]}}var ZS={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"},WS=SS(ZS);const NS=WS;var sQ=/[&<>"']/g,nS=RegExp(sQ.source);function ES(U){return U=zQ(U),U&&nS.test(U)?U.replace(sQ,NS):U}function kS(U,F){return CQ(F,function(Q){return U[Q]})}var IQ=Object.prototype,TS=IQ.hasOwnProperty;function xF(U,F,Q,B){return U===void 0||AU(U,IQ[Q])&&!TS.call(B,Q)?F:U}var aS={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"};function DS(U){return"\\"+aS[U]}var tS=/<%=([\s\S]+?)%>/g;const wQ=tS;var CS=/<%-([\s\S]+?)%>/g;const cS=CS;var pS=/<%([\s\S]+?)%>/g;const hS=pS;var eS={escape:cS,evaluate:hS,interpolate:wQ,variable:"",imports:{_:{escape:ES}}};const HF=eS;var MS="Invalid `variable` option passed into `_.template`",mS=/\b__p \+= '';/g,bS=/\b(__p \+=) '' \+/g,GS=/(__e\(.*?\)|\b__t\)) \+\n'';/g,XS=/[()=,{}\[\]\/\s]/,yS=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,BU=/($^)/,YS=/['\n\r\u2028\u2029\\]/g,oS=Object.prototype,sF=oS.hasOwnProperty;function g(U,F,Q){var B=HF.imports._.templateSettings||HF;Q&&yQ(U,F,Q)&&(F=void 0),U=zQ(U),F=zF({},F,B,xF);var R=zF({},F.imports,B.imports,xF),V=Kd(R),l=kS(R,V),J,d,S=0,Z=F.interpolate||BU,W="__p += '",p=RegExp((F.escape||BU).source+"|"+Z.source+"|"+(Z===wQ?yS:BU).source+"|"+(F.evaluate||BU).source+"|$","g"),t=sF.call(F,"sourceURL")?"//# sourceURL="+(F.sourceURL+"").replace(/\s/g," ")+"\n":"";U.replace(p,function(D,c,h,P,x,e){return h||(h=P),W+=U.slice(S,e).replace(YS,DS),c&&(J=!0,W+="' +\n__e("+c+") +\n'"),x&&(d=!0,W+="';\n"+x+";\n__p += '"),h&&(W+="' +\n((__t = ("+h+")) == null ? '' : __t) +\n'"),S=e+D.length,D}),W+="';\n";var C=sF.call(F,"variable")&&F.variable;if(!C)W="with (obj) {\n"+W+"\n}\n";else if(XS.test(C))throw new Error(MS);W=(d?W.replace(mS,""):W).replace(bS,"$1").replace(GS,"$1;"),W="function("+(C||"obj")+") {\n"+(C?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(J?", __e = _.escape":"")+(d?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+W+"return __p\n}";var T=dS(function(){return Function(V,t+"return "+W).apply(void 0,l)});if(T.source=W,HQ(T))throw T;return T}var _U={exports:{}},I=typeof Reflect=="object"?Reflect:null,IF=I&&typeof I.apply=="function"?I.apply:function(U,F,Q){return Function.prototype.apply.call(U,F,Q)},lU;I&&typeof I.ownKeys=="function"?lU=I.ownKeys:Object.getOwnPropertySymbols?lU=function(U){return Object.getOwnPropertyNames(U).concat(Object.getOwnPropertySymbols(U))}:lU=function(U){return Object.getOwnPropertyNames(U)};function rS(U){console&&console.warn&&console.warn(U)}var OQ=Number.isNaN||function(U){return U!==U};function N(){N.init.call(this)}_U.exports=N;_U.exports.once=zS;N.EventEmitter=N;N.prototype._events=void 0;N.prototype._eventsCount=0;N.prototype._maxListeners=void 0;var wF=10;function TU(U){if(typeof U!="function")throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof U)}Object.defineProperty(N,"defaultMaxListeners",{enumerable:!0,get:function(){return wF},set:function(U){if(typeof U!="number"||U<0||OQ(U))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+U+".");wF=U}});N.init=function(){(this._events===void 0||this._events===Object.getPrototypeOf(this)._events)&&(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0};N.prototype.setMaxListeners=function(U){if(typeof U!="number"||U<0||OQ(U))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+U+".");return this._maxListeners=U,this};function KQ(U){return U._maxListeners===void 0?N.defaultMaxListeners:U._maxListeners}N.prototype.getMaxListeners=function(){return KQ(this)};N.prototype.emit=function(U){for(var F=[],Q=1;Q<arguments.length;Q++)F.push(arguments[Q]);var B=U==="error",R=this._events;if(R!==void 0)B=B&&R.error===void 0;else if(!B)return!1;if(B){var V;if(F.length>0&&(V=F[0]),V instanceof Error)throw V;var l=new Error("Unhandled error."+(V?" ("+V.message+")":""));throw l.context=V,l}var J=R[U];if(J===void 0)return!1;if(typeof J=="function")IF(J,this,F);else for(var d=J.length,S=fQ(J,d),Q=0;Q<d;++Q)IF(S[Q],this,F);return!0};function jQ(U,F,Q,B){var R,V,l;if(TU(Q),V=U._events,V===void 0?(V=U._events=Object.create(null),U._eventsCount=0):(V.newListener!==void 0&&(U.emit("newListener",F,Q.listener?Q.listener:Q),V=U._events),l=V[F]),l===void 0)l=V[F]=Q,++U._eventsCount;else if(typeof l=="function"?l=V[F]=B?[Q,l]:[l,Q]:B?l.unshift(Q):l.push(Q),R=KQ(U),R>0&&l.length>R&&!l.warned){l.warned=!0;var J=new Error("Possible EventEmitter memory leak detected. "+l.length+" "+String(F)+" listeners added. Use emitter.setMaxListeners() to increase limit");J.name="MaxListenersExceededWarning",J.emitter=U,J.type=F,J.count=l.length,rS(J)}return U}N.prototype.addListener=function(U,F){return jQ(this,U,F,!1)};N.prototype.on=N.prototype.addListener;N.prototype.prependListener=function(U,F){return jQ(this,U,F,!0)};function vS(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,arguments.length===0?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function uQ(U,F,Q){var B={fired:!1,wrapFn:void 0,target:U,type:F,listener:Q},R=vS.bind(B);return R.listener=Q,B.wrapFn=R,R}N.prototype.once=function(U,F){return TU(F),this.on(U,uQ(this,U,F)),this};N.prototype.prependOnceListener=function(U,F){return TU(F),this.prependListener(U,uQ(this,U,F)),this};N.prototype.removeListener=function(U,F){var Q,B,R,V,l;if(TU(F),B=this._events,B===void 0)return this;if(Q=B[U],Q===void 0)return this;if(Q===F||Q.listener===F)--this._eventsCount===0?this._events=Object.create(null):(delete B[U],B.removeListener&&this.emit("removeListener",U,Q.listener||F));else if(typeof Q!="function"){for(R=-1,V=Q.length-1;V>=0;V--)if(Q[V]===F||Q[V].listener===F){l=Q[V].listener,R=V;break}if(R<0)return this;R===0?Q.shift():LS(Q,R),Q.length===1&&(B[U]=Q[0]),B.removeListener!==void 0&&this.emit("removeListener",U,l||F)}return this};N.prototype.off=N.prototype.removeListener;N.prototype.removeAllListeners=function(U){var F,Q,B;if(Q=this._events,Q===void 0)return this;if(Q.removeListener===void 0)return arguments.length===0?(this._events=Object.create(null),this._eventsCount=0):Q[U]!==void 0&&(--this._eventsCount===0?this._events=Object.create(null):delete Q[U]),this;if(arguments.length===0){var R=Object.keys(Q),V;for(B=0;B<R.length;++B)V=R[B],V!=="removeListener"&&this.removeAllListeners(V);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if(F=Q[U],typeof F=="function")this.removeListener(U,F);else if(F!==void 0)for(B=F.length-1;B>=0;B--)this.removeListener(U,F[B]);return this};function gQ(U,F,Q){var B=U._events;if(B===void 0)return[];var R=B[F];return R===void 0?[]:typeof R=="function"?Q?[R.listener||R]:[R]:Q?iS(R):fQ(R,R.length)}N.prototype.listeners=function(U){return gQ(this,U,!0)};N.prototype.rawListeners=function(U){return gQ(this,U,!1)};N.listenerCount=function(U,F){return typeof U.listenerCount=="function"?U.listenerCount(F):PQ.call(U,F)};N.prototype.listenerCount=PQ;function PQ(U){var F=this._events;if(F!==void 0){var Q=F[U];if(typeof Q=="function")return 1;if(Q!==void 0)return Q.length}return 0}N.prototype.eventNames=function(){return this._eventsCount>0?lU(this._events):[]};function fQ(U,F){for(var Q=new Array(F),B=0;B<F;++B)Q[B]=U[B];return Q}function LS(U,F){for(;F+1<U.length;F++)U[F]=U[F+1];U.pop()}function iS(U){for(var F=new Array(U.length),Q=0;Q<F.length;++Q)F[Q]=U[Q].listener||U[Q];return F}function zS(U,F){return new Promise(function(Q,B){function R(l){U.removeListener(F,V),B(l)}function V(){typeof U.removeListener=="function"&&U.removeListener("error",R),Q([].slice.call(arguments))}AQ(U,F,V,{once:!0}),F!=="error"&&xS(U,R,{once:!0})})}function xS(U,F,Q){typeof U.on=="function"&&AQ(U,"error",F,Q)}function AQ(U,F,Q,B){if(typeof U.on=="function")B.once?U.once(F,Q):U.on(F,Q);else if(typeof U.addEventListener=="function")U.addEventListener(F,function R(V){B.once&&U.removeEventListener(F,R),Q(V)});else throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof U)}var HS=_U.exports;class $U extends HS.EventEmitter{constructor(Q){super();a(this,"worker");a(this,"callbacks");this.worker=new Q,this.callbacks=new Map,this.worker.onmessage=this._onmessage.bind(this)}_onmessage(Q){const{data:B}=Q,{reqID:R,data:V}=B;if(this.callbacks.has(R)){const l=this.callbacks.get(R);l&&l(V),this.callbacks.delete(R)}}send(Q){const B=Date.now();return new Promise(R=>{this.callbacks.set(B,R),this.worker.postMessage({...Q,reqID:B})})}postMessage(Q){this.worker.postMessage(Q)}onMessage(Q){var B;(B=this.worker)==null||B.addEventListener("message",R=>{Q(R.data)})}terminate(){var Q;(Q=this.worker)==null||Q.terminate()}destroy(){this.removeAllListeners(),this.worker.terminate()}}const qQ="",OF=typeof window<"u"&&window.Blob&&new Blob([atob(qQ)],{type:"text/javascript;charset=utf-8"});function sS(){let U;try{if(U=OF&&(window.URL||window.webkitURL).createObjectURL(OF),!U)throw"";return new Worker(U)}catch(F){return new Worker("data:application/javascript;base64,"+qQ)}finally{U&&(window.URL||window.webkitURL).revokeObjectURL(U)}}const _Q=new $U(sS),$Q="",KF=typeof window<"u"&&window.Blob&&new Blob([atob($Q)],{type:"text/javascript;charset=utf-8"});function IS(){let U;try{if(U=KF&&(window.URL||window.webkitURL).createObjectURL(KF),!U)throw"";return new Worker(U)}catch(F){return new Worker("data:application/javascript;base64,"+$Q)}finally{U&&(window.URL||window.webkitURL).revokeObjectURL(U)}}const UB=new $U(IS);var YU=(U=>(U.VECTOR="VECTOR",U.BITMAP="BITMAP",U))(YU||{}),FB=(U=>(U.engrave="engrave",U.fillEngrave="fillEngrave",U.cut="cut",U))(FB||{});const wS=["M32 X5000","G4 P0.1","G90","M3 S1","G0 F15000",""],OS=["G0X<%= startX %>Y<%= startY %>","G0F<%= speed %>","G1F<%= speed %>",""],KS=[""],jS=["G0 F15000",""],uS=g(OS.join("\n")),gS=g(wS.join("\n")),PS=g(KS.join("\n")),fS=g(jS.join("\n")),AS=(U,F)=>{const Q=uS(F),B=PS(F);return Q+U+B},qS=(U,F)=>{var V;const Q=((V=U.match(/.+\n/))==null?void 0:V[0])||"";U=U.replace(Q,"".concat(Q,"G0Z").concat(F.zDistance,"\n"));const B=gS(F),R=fS(F);return B+U+R},_S=["M32 X1300Y500","G4 P0.1","G90","M4 S0","G0 F15000",'<%= workMode == 1? "G0X100":"" %>',""],$S=g(_S.join("\n")),UZ=(U,F)=>{var B;const Q=((B=U.match(/.+\n/))==null?void 0:B[0])||"";return U=U.replace(Q,"".concat(Q,"G0Z").concat(F.zDistance,"\n")),$S(F)+U+"\n"};let o,oU;const FZ=['<%= airPumpSwitch? "M8": "M9" %>',"M14 S1","M15 S1",'<%= workMode? "M110U1":"" %>',""],QZ=["G1 S0","M5","M9","G4 P0.1","G0Z0","G0 X0Y0","M6"],BZ=({vectGcodeList:U,bitmapGcodeList:F},Q)=>{let B="";U.forEach(l=>{const{gcode:J}=l;B+=J}),B&&(B=UZ(B,Q));let R="";F.forEach(l=>{const{gcode:J,params:d}=l,S={...d};d.workMode===1&&(S.startX=d.startY,S.startY=d.rotateStartY),R+=AS(J,S)}),R&&(R=qS(R,Q));let V=R+"\n"+B;return V=VZ(V,Q),V=lZ(V),V},RZ=g(FZ.join("\n")),VZ=(U,F)=>RZ(F)+U,lZ=U=>U+QZ.join("\n")+"\n\n\n",JZ=async(U,F,Q)=>{o=F,oU=Q;const{vectorList:B,bitmapList:R,airPumpSwitch:V,workMode:l=0,rotateStartY:J=0,stageHeight:d=0,U_RATE:S=1}=U;let{zDistance:Z}=U;Z=Number(Z.toFixed(3));const W=[],p=[];if(R&&R.length>0)for(let T=0;T<R.length;T++){const{speed:D,power:c,repeat:h,startX:P,startY:x}=R[T],e=d-J;let f=await SZ(R[T],{isRotateMode:l===1,rotateStartY:J,startU:e,stageHeight:d,U_RATE:S});h>1&&(f=f.repeat(h)),p.push({gcode:f,type:YU.BITMAP,params:{speed:D,power:c,startX:P,startY:x,rotateStartY:J,workMode:l}})}if(B&&B.length>0)for(let T=0;T<B.length;T++){const{speed:D,power:c,repeat:h,strengthCutting:P}=B[T],x=d-J;let e=await dZ(B[T],{workMode:l,rotateStartY:J,startU:x,U_RATE:S});if(h>1)if(P){const f=e,lB=(Z+100)/h;for(let aU=1;aU<h;aU++)e+="G0Z".concat((Z-lB*aU).toFixed(3),"\n").concat(f);e+="G0Z".concat(Z,"\n")}else e=e.repeat(h);W.push({gcode:e,type:YU.VECTOR,params:{speed:D,power:c}})}const t=Z<-100?-100:Z,C=BZ({vectGcodeList:W,bitmapGcodeList:p},{zDistance:t,airPumpSwitch:V,workMode:l});return o&&o(C),C},dZ=async(U,F)=>await UB.send({method:"genSVGGcode",data:{...U,...F}}),SZ=async(U,F)=>await _Q.send({method:"genBitmapGcode",data:{...U,...F}});_Q.onMessage(U=>{const{type:F,gcode:Q}=U||{};if(F==="write")console.log(Q),Q&&Q!==""&&o&&o(Q);else if(F==="saveImg"){const{data:B,name:R}=U;oU&&oU("".concat(R,".jpg"),{data:B.data,width:B.width,height:B.height})}});UB.onMessage(U=>{const{type:F,gcode:Q}=U||{};F==="write"&&(console.log(Q),Q&&Q!==""&&o&&o(Q))});let rU;async function ZZ(U,F,Q){const B=[],R=[];rU=Q,U.reverse();for(let V=0;V<U.length;V++){const l=U[V];if(l.type==="image"||l.fill){const J=F[l.id],d=J.lineDesity/10,S=await WZ(l,d),Z=nZ(S.data);NZ(l,d,Z);const W=1/d,p=J.fillEngrave,{speed:t,power:C,repeat:T}=p,D={grayBuffer:Z,imgRevertMode:J.imgRevertMode,currentDpi:W,pixelsWidth:S.width,pixelsHeight:S.height,speed:jF(t),power:uF(C),width:l.width,height:l.height,repeat:T,startX:Number(l.left.toFixed(3)),startY:Number(l.top.toFixed(3)),oneWayScan:J.oneWayScan,wallOffset:t*t/(2*5e3)+1};R.push(D)}else{const J=F[l.id],{power:d,speed:S,repeat:Z}=J[J.processMode],W={svgStr:l.svg,speed:jF(S),power:uF(d),repeat:Z,startX:Number(l.left.toFixed(3)),startY:Number(l.top.toFixed(3))};J.processMode===FB.cut&&(W.strengthCutting=J[J.processMode].strengthCutting),B.push(W)}}return R.reverse(),R.sort((V,l)=>V.pixelsWidth*V.pixelsHeight-l.pixelsWidth*l.pixelsHeight),B.sort((V,l)=>V.power-l.power),{vectorList:B,bitmapList:R}}const WZ=(U,F)=>new Promise(Q=>{const B=new Image;B.onload=()=>{const R=document.createElement("canvas");R.width=U.width*F>>0,R.height=U.height*F>>0;const V=R.getContext("2d");if(V){V.drawImage(B,0,0,B.width,B.height,0,0,R.width,R.height);const l=V.getImageData(0,0,R.width,R.height);U.imageData=l,U.pixelsWidth=l.width,U.pixelsHeight=l.height,Q(l)}},B.src=U.src}),NZ=(U,F,Q)=>{const B=new ImageData(U.width*F>>0,U.height*F>>0);for(let R=0,V=0;R<Q.length;R++)B.data[V++]=Q[R],B.data[V++]=Q[R],B.data[V++]=Q[R],B.data[V++]=255;rU&&rU("1.jpg",{data:B.data,width:B.width,height:B.height})},nZ=U=>{const F=U.length/4,Q=new Uint8ClampedArray(F);for(let B=0;B<U.length;B+=4)Q[B>>2]=.3*U[B]+.6*U[B+1]+.1*U[B+2]>>0;return Q},jF=U=>U*60,EZ=1e3,uF=U=>U===0?0:EZ/100*U,QB="",gF=typeof window<"u"&&window.Blob&&new Blob([atob(QB)],{type:"text/javascript;charset=utf-8"});function kZ(){let U;try{if(U=gF&&(window.URL||window.webkitURL).createObjectURL(gF),!U)throw"";return new Worker(U)}catch(F){return new Worker("data:application/javascript;base64,"+QB)}finally{U&&(window.URL||window.webkitURL).revokeObjectURL(U)}}const MZ=new $U(kZ),ZU=class ZU{constructor(){a(this,"id","");a(this,"canvasList");this.canvasList=new Map}static get instance(){return this._instance||(this._instance=new ZU),this._instance}setID(F){this.id=F}add(F,Q){this.canvasList.set(F,Q),this.setID(F)}has(F){return this.canvasList.has(F)}remove(F){this.canvasList.has(F)&&this.canvasList.delete(F)}getCanvasById(F){return this.canvasList.get(F)}getList(){return this.canvasList}getID(){return this.id}destroy(F){if(F){const Q=this.canvasList.get(F);Q==null||Q.destroy(),this.remove(F);return}this.canvasList.forEach(Q=>{Q.destroy()}),this.canvasList=new Map}get canvas(){return this.canvasList.get(this.id)}};a(ZU,"_instance");let s=ZU;var BB=(U=>(U.STAGE="STAGE",U.ELEMENT="ELEMENT",U.DIIFGROP="DIIFGROP",U))(BB||{});const TZ=["processMode","cut","engrave","fillEngrave","lineDesity","imgRevertMode","powerSlicing"];var RB=(U=>(U.GRAY="gray",U.BAYER="bayer",U.FLOYD="floyd",U.STUCKI="stucki",U.ATKINSON="atkinson",U.JARVIS="jarvis",U.SIERRA="sierra",U))(RB||{});const aZ=vU("editor",{state:()=>({propertyMode:BB.STAGE,systemMaterials:Object.values(mF["20w"]),currmaterials:mF["20w"].material_0000002,currProperty:{type:"",id:"",left:0,top:0,width:0,height:0,angle:0,isLock:!0,cut:{power:1,speed:1,repeat:1},engrave:{power:1,speed:1,repeat:1},fillEngrave:{power:1,speed:1,repeat:1},processMode:M.engrave,oneWayScan:!1,lineDesity:100},space:3136,clip:[35,385,4032,3024],projectDirty:!1,useDeviceStore:VB(),calibrations:{clip:[],height:-100,f:0,angle:0,centerX:0,centerY:0,taransform:{},points:[],proportion:{w:0,h:0}},thickness:0,currentCanvasLayer:{},layerList:[],localProjectId:"",localProjectList:JSON.parse(localStorage.getItem("localProjectList"))||[],currCanvasId:"",remark:"",localCanvasIdDataURLMap:{}}),getters:{canvas(){return()=>s.instance.canvas}},actions:{chanePropertyMode(U){this.propertyMode=U},setElementProperty(U){var F;if(U.type==="activeSelection"){if(U.children.length===0)return;const B={...H.get(U.children[0].id),...U};this.currProperty=B}else{H.get(U.id)||(U.type==="image"&&(U.imgRevertMode=(F=U.imgRevertMode)!=null?F:RB.JARVIS),Object.assign(U,{engrave:cU(this.currmaterials.engrave),fillEngrave:cU(this.currmaterials.fillEngrave),cut:cU(this.currmaterials.cut)})),H.set(U.id,U);const Q=H.get(U.id);this._strokeColorToProcessMode(U.originStroke)&&(Q.processMode=this._strokeColorToProcessMode(U.originStroke)),Q&&(this.currProperty=Q),this.setProjectDirty(!0)}},_strokeColorToProcessMode(U){switch(U){case"orange":return M.engrave;case"#E61F19":case"#00FF00":return M.cut;case"#17489C":return M.fillEngrave}},updateElementProperty({type:U,value:F}){var Q;this.currProperty.type==="activeSelection"&&((Q=this.currProperty.children)==null||Q.forEach(B=>{const R=MF({},U,F);H.set(B.id,R)})),MF(this.currProperty,U,F),this.setProjectDirty(!0)},setProjectDirty(U){this.projectDirty=U},addCanvas({id:U,canvas:F}){s.instance.add(U,F)},async calculateGcode(){var S,Z;(S=window==null?void 0:window.electron)==null||S.FileHelper.removeGcode();const U=await((Z=this.canvas())==null?void 0:Z.getCanvasData())||[];if(U.length===0)return;const{inList:F,hasOut:Q}=this.checkOutWorkArea(U),B=Q;if(F.length===0)return;let R="";const V={};F.forEach(W=>{V[W.id]=H.get(W.id)});const{vectorList:l,bitmapList:J}=await ZZ(F,V),d=this.thickness-100;return R=await JZ({vectorList:l,bitmapList:J,zDistance:d,airPumpSwitch:this.useDeviceStore.airPumpSwitch}),{gcode:R,isOutWorkArea:B}},checkOutWorkArea(U){let B,R=!1;const V=[];for(let l=0;l<U.length;l++)B=U[l],B.left+B.width<0||B.left>420||B.top+B.height<0||B.top>295||((B.left<0||B.left+B.width>420||B.top<0||B.top+B.height>295)&&(R=!0),V.push(B));return{inList:V,hasOut:R}},async getCameraHeight(){const U="M27\n\r",F=new ZB;F.appendAsciiStr(U);const Q=F.end(),R=(await this.useDeviceStore.uploadMcu(U,Q)).data.data,V=/Z(.*),/;if(R){const l=R.match(V);let J="";l&&(J=l[1]),this.calibrations.height=parseFloat(J)}},async setBackgroundImg(U){var B;await this.getCameraHeight(),this.calibrations.height===0?await this.computedClipTop():await this.computedClipBottom();const F=await WB(U,[this.calibrations.points[0].x,this.calibrations.points[0].y,this.calibrations.points[6].x,this.calibrations.points[6].y,this.calibrations.points[8].x,this.calibrations.points[8].y,this.calibrations.points[2].x,this.calibrations.points[2].y],this.calibrations.proportion),Q=await this._clip(F);(B=this.canvas())==null||B.setBackground(Q)},setCanvasElementProperty({type:U,value:F}){var Q,B;F!=null&&(U==="processMode"?(Q=this.canvas())==null||Q.updateProperty("fill",F):TZ.includes(U)||(B=this.canvas())==null||B.updateProperty(U,F),this.updateElementProperty({type:U,value:F}))},flipx(){var U;(U=this.canvas())==null||U.flipElement("x")},flipy(){var U;(U=this.canvas())==null||U.flipElement("y")},setProcessAlign({type:U}){var F;(F=this.canvas())==null||F.setAlignProcess(U)},editorDestroy(U){s.instance.destroy(U)},_clip(U){return new Promise((F,Q)=>{const B=this.calibrations.clip,R=document.createElement("canvas");R.width=U.width,R.height=U.height;const V=R.getContext("2d");V.drawImage(U,0,0,U.width,U.height);const l=V.getImageData(B[0],B[1],B[2],B[3]),J=document.createElement("canvas");J.width=B[2],J.height=B[3],J.getContext("2d").putImageData(l,0,0);const S=J.toDataURL("image/png",1),Z=new Image;Z.src=S,Z.onload=()=>{URL.revokeObjectURL(S),F(Z)},Z.onerror=Q})},async computedClipBottom(){const{data:U}=await this.useDeviceStore.cameraDownload(),F=(U==null?void 0:U.bottomData)||{},Q=F.f||(U==null?void 0:U.f);this.calibrations.points=F.points||(U==null?void 0:U.points),this.calibrations.proportion=(U==null?void 0:U.proportion)||{w:370*U.f/210,h:250*U.f/210};const B=210+100+this.calibrations.height-this.thickness,R=420*Q/B,V=R*295/420,l=this.calibrations.points[0].x-20*Q/B,J=this.calibrations.points[0].y-20*Q/B;this.calibrations.clip=[l,J,R,V]},async computedClipTop(){var J;const{data:U}=await this.useDeviceStore.cameraDownload();this.calibrations.points=((J=U==null?void 0:U.bottomData)==null?void 0:J.points)||(U==null?void 0:U.points),this.calibrations.proportion=(U==null?void 0:U.proportion)||{w:370*U.f/210,h:250*U.f/210};const F=(U==null?void 0:U.topData)||{points:[{x:869,y:776}],xy:2169,f:1817.27027027027},Q=210+100,B=420*F.f/Q,R=B*295/420,V=F.points[0].x-20*F.f/Q,l=F.points[0].y-20*F.f/Q;this.calibrations.clip=[V,l,B,R]},setCanvasElementPropertys(U){U.forEach(F=>{this.setCanvasElementProperty(F)})},setCalibrationsHeight(U){this.calibrations.height=U},setThickness(U){this.thickness=U},loadMaterialInitLayers(U){this.currentCanvasLayer={canvasID:U,layer:[{name:"图层 1",index:1,ids:[],isEdit:!1,selected:!0}]},this.layerList.push(this.currentCanvasLayer)},getCanvasSnapShoot(U){const F=s.instance.getCanvasById(U);F&&(this.localCanvasIdDataURLMap[U]=F.getCanvasDataURL(),F.throttleRender())}}}),PF=localStorage.getItem("deviceParams"),DZ=PF?JSON.parse(PF):null,tZ=pB(),VB=vU("ext",{state:()=>({device:DU(),deviceParams:DZ,isConnectedDevice:!1,protocol:"http://",port:":8080",airPumpSwitch:!0,packageInfos:{appVersion:"",country:"",language:"",releaseTime:"",systemVersion:""},nativeDeviceInfo:null,isCancelConnect:!1}),actions:{async getDeviceInfoAPI(U,F){if(this.isCancelConnect=F||!1,F)return this.setIsConnectedDevice(!1),this.deviceParams=null,this.device=DU(),{code:0};const Q=U||this.device.ip||"";if(!Q)return{code:0};const B=await NB("".concat(this.protocol).concat(Q).concat(this.port));return this.isCancelConnect?(this.setIsConnectedDevice(!1),this.deviceParams=null,this.device=DU(),{code:0}):B?(localStorage.setItem("deviceParams",JSON.stringify(B)),this.deviceParams=B,this.setIsConnectedDevice(!0),this.setParamsLogined(B),this.setDeviceIP(B.wlan0_ip),{code:1}):{code:0}},getNativeDeviceInfo(){return new Promise(async(U,F)=>{SB("deviceInfo",{},Q=>{console.log(Q,"------设备信息"),Q?(U(JSON.parse(Q)),this.nativeDeviceInfo=JSON.parse(Q)):(F("info empty!"),this.nativeDeviceInfo=null)})})},setDeviceIP(U){this.device.ip=U,this.device.connect(this.protocol+U)},setIsConnectedDevice(U){this.isConnectedDevice=U},async uploadGcode(U,F){var Q;return await((Q=this.device)==null?void 0:Q.uploadGcode(U,F))},setDeviceConfig(U){var F;return(F=this.device)==null?void 0:F.setDeviceConfig(U)},setParamsLogined(U){localStorage.setItem("deviceParams",JSON.stringify(U)),this.deviceParams=U,tZ.initScoket(),this.setIsConnectedDevice(!0)},async measureDistance(U){var F,Q;return await((Q=(F=this.device)==null?void 0:F.measureDistance)==null?void 0:Q.call(F,U))},async takePhoto(){var B;const{data:U}=await((B=this.device)==null?void 0:B.takePhoto()),F=await hB(U);aZ().setBackgroundImg(F)},setAirPumpSwitch(U){this.airPumpSwitch=U},async uploadMcu(U,F){var Q;return await((Q=this.device)==null?void 0:Q.uploadMcu(U,F))},async cameraDownload(){var U;return await((U=this.device)==null?void 0:U.cameraDownload())},setPackageInfos(U){this.packageInfos=U}}});export{s as C,MZ as M,BB as P,pB as a,aZ as b,cU as c,iU as i,ul as m,KV as t,VB as u};
